name: Release to PyPI

on:
  push:
    tags: [ 'v*' ]

defaults:
  run:
    working-directory: ./python

jobs:
  validate-git-tag:
    name: Validate the git tag
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: compare git tag with cargo metadata
        run: |
          TAG=${GITHUB_REF##*/}
          CURR_VER=$( grep version Cargo.toml | head -n 1 | awk '{print $3}' | tr -d '"' )
          if [[ "${TAG}" != "v${CURR_VER}" ]]; then
            echo "Cargo metadata has version set to ${CURR_VER}, but got pushed tag ${TAG}."
            exit 1
          fi

  release-pypi-mac-windows:
    needs: validate-git-tag
    name: PyPI release Mac & Windows
    strategy:
      fail-fast: false
      matrix:
        os:
          - macOS-13
          - macOS-14
          - windows-2022
        include:
          - target: x86_64-apple-darwin
            os: macOS-13
          - target: aarch64-apple-darwin
            os: macOS-14
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Publish to pypi
        uses: messense/maturin-action@main
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          target: ${{ matrix.target }}
          command: publish
          args: -m python/Cargo.toml --no-sdist

  release-pypi-manylinux:
    needs: validate-git-tag
    name: PyPI release manylinux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Publish manylinux to pypi x86_64
        uses: messense/maturin-action@main
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          target: x86_64-unknown-linux-gnu
          command: publish
          args: -m python/Cargo.toml

      - name: Publish manylinux to pypi aarch64 (without sdist)
        uses: messense/maturin-action@main
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          target: aarch64-unknown-linux-gnu
          command: publish
          args: -m python/Cargo.toml --no-sdist

  release-documentation:
    needs: [ validate-git-tag, release-pypi-manylinux, release-pypi-mac-windows ]
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64:2020-12-31-56195b3
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v1

      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          $HOME/.cargo/bin/rustup default stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Enable manylinux Python targets
        run: echo "/opt/python/cp39-cp39m/bin" >> $GITHUB_PATH

      - name: Setup
        run: make setup

      - name: Install metadata guardian
        run: |
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          make develop

      - name: Build and Publish Sphinx documentation
        run: |
          echo "Generate the new documentation"
          make build-documentation
          mv docs/build ~/build
          
          echo "Configure git"
          git config --global user.name 'Github Action'
          git config --global user.email 'fvaleye@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          
          echo "Commit the new changes in the gh-pages"
          git reset --hard HEAD
          git clean -d -fx .
          git checkout gh-pages
          cd ..
          cp -avr ~/build/html/.  ./python
          
          CURR_VER=$( grep version Cargo.toml | head -n 1 | awk '{print $3}' | tr -d '"' )
          git status
          git add ./python
          git commit -m "Publish the new documentation for v${CURR_VER}"
          git push origin gh-pages